Memory Map & Boot procedure
^^^^^^^^^^^^^^^^^^^^^^^^^^^
BX2400的存储区域地址映射，需要从三个角度进行说明：Flash可执行文件的结构，Image结构和运行时地址映射。三者关系如下：

    .. image:: memory_map_img0.png

    - A:表示运行时，从Flash Image中复制到RAM中的代码段和数据段
    
    - B:表示运行时，留在Flash中，在运行时会被访问的代码和NVDS数据

1. 存储空间介绍

    1. Flash可执行文件
        
        Flash可执行文件指的是在在BX2400 SDK里编译链接，最后通过bin_merge生成的flash.hex，也是最终烧写入Flash中的二进制文件。如上图所示，包括Boot_in_ram, image0/image1和NVDS区域。

         - 2nd bootloader: 表示BX2400启动的第二段流程（第一段软件启动流程1st bootloader在ROM里）可执行代码

         - image0/image1: 表示BX2400里包含用户代码和数据的二进制映像。之所以有两个image，主要是针对有OTA需求的用户应用

         - NVDS区域: NVDS0/NVDS1包含存储在Flash里和IC相关的配置相关数据。两个NVDS是为了从应用的角度尽量延长Flash的使用寿命，防止Flash因为某些频繁操作Flash的擦写动作而损坏

        Flash可执行文件具体如下：

        +-------------------------------+--------------------------------+--------------------------------+
        |                               |                                |                                |
        |         Section size          |           Base address         |       Section description      |
        |                               |                                |                                |
        +===============================+================================+================================+
        |             0x1000            |              0x0               |         2nd bootloader         |
        +-------------------------------+--------------------------------+--------------------------------+
        |          image limit          |            0x1000              |          user image 0          |
        +-------------------------------+--------------------------------+--------------------------------+
        |          image limit          |       0x1000+image_limit       |          user image 1          |
        +-------------------------------+--------------------------------+--------------------------------+
        |      flash_size - 0x1000 -    |                                |                                |
        |   2*(image_limit + nvds_size) |      0x1000+2*image_limit      |            reserved            |
        +-------------------------------+--------------------------------+--------------------------------+
        |          nvds_size            |    flash_size - 2*nvds_size    |         NVDS section 0         |
        +-------------------------------+--------------------------------+--------------------------------+
        |          nvds_size            |    flash_size - nvds_size      |         NVDS section 1         |
        +-------------------------------+--------------------------------+--------------------------------+

    #. Image结构

        Image里主要内容是用户在BX2400 SDK里编译链接得到的可执行文件，外加一个Boot需要的头结构。
        
        image header里的内容为IC boot提供足够的信息，例如Flash单线/双线/四线选择，Flash电压，image的大小以及image的版本等。通常情况下用户不需要关心这里的细节。
        
        image里的ISR Vector Table是中断向量表，Jump Table主要包含ROM对RAM里内容的调用和引用，RAM Code & Data包含用户的代码和数据区。在大多数情况下，Flash Code For XIP通常为空，除非用户代码和数据太多，RAM里无法存放，此时链接脚本会自动将剩余的代码/数据放入Flash中。

        +-------+---------------------+------------+---------------------------+
        |       |                     |            |                           |
        | Base  | Section             | Offset     |Description                |
        |       |                     |            |                           |
        +=======+=====================+============+===========================+
        | 0x0   | image header        | 0x0-0x50   |uint16_t crc[40]           |
        |       |                     +------------+---------------------------+
        |       |                     | 0x50-0x54  |uint32_t feature           |
        |       |                     +------------+---------------------------+
        |       |                     | 0x54-0x58  |uint32_t image_id          |
        |       |                     +------------+---------------------------+
        |       |                     | 0x58-0x5c  |uint32_t image_ram_size    |
        |       |                     +------------+---------------------------+
        |       |                     | 0x5c-0x60  |uint32_t image_total_size  |
        |       |                     +------------+---------------------------+
        |       |                     | 0x60-0x80  |reserved                   |
        +-------+---------------------+------------+---------------------------+
        | 0x80  | image code and data | 0x0-0x8c   |ISR Vector Table           |
        |       |                     +------------+---------------------------+
        |       |                     | 0x8c-0x100 |ROM Code Jump Table        |
        |       |                     +------------+---------------------------+
        |       |                     | 0x100-     |RAM Code and Data          |
        |       |                     +------------+---------------------------+
        |       |                     |            |Flash Code For XIP         |
        +-------+---------------------+------------+---------------------------+

    #. 运行时地址映射

        在BX2400完成启动后，软件开始运行，参与运行的物理区域包括ROM, RAM和Flash(可选)：
        
         - ROM
         
         ROM里包含只读的代码，最主要是BLE协议栈，以及Bootloader的第一段
         
         - RAM
         
         RAM为可读可写存储区，可以以字节为单位进行访问。这里主要存储FreeRTOS，用户代码，Profile，驱动等不适宜放在ROM中的软件代码，和所有全局数据区域，比如堆和栈。RAM中从0x128000开始往后16KB（实际使用不到10KB）为EM区域，用户不可用
         
         - Flash
         
         Flash主要存储flash.hex，当RAM可以容纳所有用户软件/数据时，Flash在实际运行时不会有访问。只有当用户的软件/数据量无法完全塞入RAM中的时候，链接脚本才会将多余的代码放到Flash中去，此时CPU会通过Cache对Flash进行读操作

        +-------------+-------------------+-------------------------+
        | Memory type | Address           | Description             |
        |             |                   |                         |
        |             |                   |                         |
        +=============+===================+=========================+
        | ROM         | 0x0-0x1a00        | 1st bootloader          |
        |             +-------------------+-------------------------+
        |             | 0x1a00-0x20000    | BLE stack code          |
        +-------------+-------------------+-------------------------+
        |             |                   |                         |
        +-------------+-------------------+-------------------------+
        | RAM         | 0x100000-0x128000 | Data and code in RAM    |
        |             +-------------------+-------------------------+
        |             | 0x128000-0x130000 | Exchange table for BLE  |
        +-------------+-------------------+-------------------------+
        |             |                   |                         |
        +-------------+-------------------+-------------------------+
        | Flash       | 0x800000-0x8XXXXX | Useless in runtime      |
        |             +-------------------+-------------------------+
        |             | 0x8XXXXX-         | Code for XIP            |
        |             +-------------------+-------------------------+
        |             |                   | Other contents in Flash |
        +-------------+-------------------+-------------------------+

#. BX2400启动流程

    .. image:: memory_map_img1.png

    BX2400的启动是从ROM开始，分为1st bootloader和2nd bootloader两部分。BX2400的Boot分为Boot from Flash和Boot from Uart两种，分别对应正常用户启动模式和量产模式。由于二者工作机制类似，此处重点介绍前者。
    
    - 1st step: 当IC上电时，CPU会自动运行1s bootloader，也就是ROM中起始地址之后的那一部分可执行代码。这部分代码里，会去检测Boot模式，以及对应IO的启动电压。假设此处检测到需要Boot from Flash，且电压为1.8V，bootloader会将Flash对应的IO电压配置为1.8V，之后尝试去Flash中一个固定的位置去读取2nd bootloader
    
    - 2nd step: 第一步1st bootloader读取2nd bootloader，如果不成功，会反复尝试从Flash boot；读取成功则将2nd bootloader读取入RAM中。当2nd bootloader读取到RAM中后，CPU会自动跳转到2nd bootloader处执行
    
    - 3rd step: 2nd bootloader本身是一个完整的可执行文件，开始执行后，会找到RAM中Image中对应的地址，去读取Image的header结构，从中挑选出最新版本的Image，并读入RAM中。在2nd bootloader执行完成后，CPU会跳转到读入RAM的用户Image处并开始执行，之后ROM/RAM/Flash里应该参与运行的代码和数据(图中红色部分)有可能被访问。此时整个Boot流程完成
    
    Boot from Uart的流程与此十分类似，唯一的不同是2nd bootloader不是从Flash中读取的，而是从Uart处接收到的，其他流程没有区别。当用户最终产品从上电开始运行时，进入的模式通常是Boot from Flash，而在产线上把用户代码烧写到Flash中去时，通常是Boot from Uart